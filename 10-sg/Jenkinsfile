pipeline {
    agent {
        label 'AGENT-1'
    }

    options {
        timeout(time:30, unit:'MINUTES') // set a timeout of 30 minutes for the entire pipeline
        disableConcurrentBuilds() // disable concurrent builds, only one build can run at a time
    }

    environment {
        appVersion = ''
        ACC_ID = '057260092371'
        REGION = 'us-east-1'
        PROJECT = 'roboshop'
        COMPONENT = 'cataloguee'
    }

    stages {
        
        stage('init') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: "${REGION}") {
                        sh """
                        cd 10-sg
                        terraform init -reconfigure
                        """
                    }
                }
            }
        }

        stage('plan') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: "${REGION}") {
                        sh """
                        cd 10-sg
                        terraform plan
                        """
                    }
                }
            }
        }

        stage('apply') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: "${REGION}") {
                        sh """
                        cd 10-sg
                        terraform apply -auto-approve
                        """
                    }
                }
            }
        }

        stage('Bastion EKS ACM ALB') {
            parallel {
                stage('Trigger Bastion Job') {
                    steps {
                        script {
                            build job: '20-bastion',
                            propagate: false
                        }
                    }
                }
                // other parallel jobs here...
            }
        }

        // stage('Downstream ALB Job') { ... }
    }  // <-- closes stages

    post {
        always {
            echo 'Cleaning up...'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}  // <-- closes pipeline
